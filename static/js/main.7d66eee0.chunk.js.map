{"version":3,"sources":["images/star-wars-logo.jpeg","images/baby-yoda.jpeg","images/light-saber-x.jpeg","images/character-picture.jpeg","Components/Form/Form.js","Components/Movie/Movie.js","Components/Header/Header.js","Components/MovieContainer/MovieContainer.js","Components/Character/Character.js","Components/ScrollingText/ScrollingText.js","Components/CharacterContainer/CharacterContainer.js","Components/Loading/Loading.js","apiCalls.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","props","handleChange","event","setState","target","name","value","submitUser","addUser","state","quote","rank","favoriteCharacters","loggedIn","checkInputs","errorProperty","error","Object","keys","forEach","key","checkReady","nameErrorClass","this","quoteErrorClass","rankErrorClass","className","src","starWarsLogo","alt","type","placeholder","onChange","onClick","Component","Movie","title","episode","releaseDate","showMovieCharacters","to","Header","user","logOut","babyYoda","replace","lightsaberLogout","MovieContainer","movies","allMovies","sort","a","b","map","movie","i","image","openingCredits","characters","Character","world","population","species","relatedFilms","characterImage","height","width","ScrollingText","episodeNumber","movieTitle","movieText","CharacterContainer","character","join","Loading","getFilm","film","fetch","then","res","ok","Error","json","getSpecies","getWorld","getCharacter","App","userLogOut","newUser","isLoading","setTimeout","parseReleaseDate","date","split","buildCharacterData","promises","buildWorldData","homeworld","char","buildSpeciesData","buildFilmData","films","push","catch","console","log","charSpecies","data","selectedCharacters","url","results","episode_id","release_date","opening_crawl","err","exact","path","render","match","find","parseInt","params","movie_id","Boolean","window","location","hostname","router","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7d66eee0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/star-wars-logo.48258048.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/baby-yoda.69c1ee31.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/light-saber-x.71dad8b8.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/character-picture.1ce9dc9a.jpeg\";","import React, { Component } from 'react';\nimport './Form.css';\nimport starWarsLogo from '../../images/star-wars-logo.jpeg';\nimport PropTypes from 'prop-types';\n\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      quote: '',\n      rank: '',\n      error: {\n          name: false,\n          quote: false,\n          rank: false,\n        }\n    }\n  };\n\n  handleChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  submitUser = () => {\n    const { addUser } = this.props;\n    let user = {\n      name: this.state.name,\n      quote: this.state.quote,\n      rank: this.state.rank,\n      favoriteCharacters: [],\n      loggedIn: true\n    };\n    addUser(user);\n  };\n\n  checkInputs = () => {\n    let errorProperty = this.state.error;\n    Object.keys(errorProperty).forEach(key => {\n      if (!this.state[key]) {\n        errorProperty[key] = true;\n        this.setState({error: errorProperty});\n      } else {\n        errorProperty[key] = false;\n        this.setState({error: errorProperty})\n      }\n    });\n    this.checkReady();\n  }\n\n  checkReady = () => {\n    let error = this.state.error;\n    return !error.name && !error.quote && !error.rank ? this.submitUser() : null;\n  };\n\n\n  render() {\n    const nameErrorClass = this.state.error.name ? 'error-border' : '';\n    const quoteErrorClass = this.state.error.quote ? 'error-border' : '';\n    const rankErrorClass = this.state.error.rank ? 'error-border' : '';\n    return (\n      <form>\n      <img className=\"star-wars-logo\" src={starWarsLogo} alt='Star Wars logo' />\n       <input\n          className={nameErrorClass}\n          type=\"text\"\n          placeholder=\" Name\"\n          name=\"name\"\n          value={this.state.name}\n          onChange={event => this.handleChange(event)}\n        />\n        <input\n          className={quoteErrorClass}\n          type=\"text\"\n          placeholder=\" Favorite Star Wars Quote\"\n          name=\"quote\"\n          value={this.state.quote}\n          onChange={event => this.handleChange(event)}\n        />\n        <select\n          className={rankErrorClass}\n          name=\"rank\"\n          value={this.state.rank}\n          onChange={event => this.handleChange(event)}\n          >\n            <option value=''>--Choose Level--</option>\n            <option value=\"beginner\">What Is Star Wars??</option>\n            <option value=\"intermediate\">Padawan</option>\n            <option value=\"expert\">The Force is Strong With This One...</option>\n        </select>\n        <button className=\"enter\" type=\"button\" onClick={this.checkInputs}>Enter, You Will</button>\n      </form>\n    )\n  }\n};\n\nexport default Form;\n\nForm.propTypes = {\n  addUser: PropTypes.func\n};\n","import React from 'react';\nimport './Movie.css';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst Movie = ({ title, episode, releaseDate, showMovieCharacters }) => {\n  return (\n    <article>\n      <div className=\"image\">\n      <h1>EPISODE {episode}</h1>\n      </div>\n      <h3>Title: <span>{title}</span></h3>\n      <h3>Release Date: <span>{releaseDate}</span></h3>\n      <div className=\"characters-button-container\">\n        <Link onClick={showMovieCharacters} to={`/movies/${episode}`} className=\"characters\" >View Characters\n        </Link>\n      </div>\n    </article>\n  )\n}\n\nexport default Movie;\n\nMovie.propTypes = {\n  title: PropTypes.string,\n  episode: PropTypes.string,\n  releaseDate: PropTypes.string,\n  showMovieCharacters: PropTypes.func\n}\n","import React from 'react';\nimport './Header.css';\nimport babyYoda from '../../images/baby-yoda.jpeg';\nimport lightsaberLogout from '../../images/light-saber-x.jpeg';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\n\n\nconst Header = ({ user, logOut }) => {\n  return (\n    <header>\n      <div className='header-container'>\n        <div className='user-badge'>\n          <h2>{user.name}</h2>\n          <img className='baby-yoda' alt='baby yoda' src={babyYoda} />\n          <p>{user.rank}</p>\n        </div>\n        <h2 className='header-quote'>{user.quote}</h2>\n        <Link to='/' replace onClick={logOut}>\n        <img className='logout-button' alt='two light sabers crossing to make an X' src={lightsaberLogout}/>\n        </Link>\n      </div>\n    </header>\n  )\n};\n\nexport default Header;\n\nHeader.propTypes = {\n  logOut: PropTypes.func,\n  user: PropTypes.object\n}\n","import React from 'react';\nimport './MovieContainer.css';\nimport Movie from '../Movie/Movie'\nimport Header from '../Header/Header';\nimport PropTypes from 'prop-types';\n\n\nconst MovieContainer = ({ movies, logOut, user, showMovieCharacters }) => {\n  let sortedMovies = movies.sort((a, b) => a.episode - b.episode);\n  const allMovies = sortedMovies.map((movie, i) => {\n    return < Movie\n        key = {i}\n        title = {movie.title}\n        episode = {movie.episode}\n        releaseDate = {movie.releaseDate}\n        image = {movie.image}\n        openingCredits = {movie.openingCredits}\n        characters={movie.characters}\n        showMovieCharacters={showMovieCharacters}\n      />\n  });\n\n  return (\n    <body>\n      <Header\n      logOut={logOut}\n      user={ user }/>\n      <main className=\"movieContainer\">\n        {allMovies}\n      </main>\n    </body>\n  )\n};\n\nexport default MovieContainer;\n\nMovieContainer.propTypes = {\n  movies: PropTypes.array,\n  logOut: PropTypes.func,\n  user: PropTypes.object,\n  showMovieCharacters: PropTypes.func\n}\n","import React from 'react';\nimport './Character.css';\nimport characterImage from '../../images/character-picture.jpeg'\nimport PropTypes from 'prop-types';\n\n\nconst Character = ({ name, world, population, species, relatedFilms }) => {\n  return (\n    <section className=\"character-cards\">\n      <article className=\"character-card\">\n      <div className=\"image-name-container\">\n        <img className=\"character-image\" src={characterImage} alt=\"two star wars silhouettes battling\" height=\"100\" width=\"100\" />\n        <p className=\"character-name\">{name}</p>\n      </div>    \n        <p className=\"character-card-font\"><span className=\"bold\">World:</span> {world}</p>\n        <p className=\"character-card-font\"><span className=\"bold\">Population:</span> {population}</p>\n        <p className=\"character-card-font\"><span className=\"bold\">Species:</span> {species}</p>\n        <p className=\"character-card-font\"><span className=\"bold\">Related Films:</span> {relatedFilms}</p>\n      </article>\n    </section>\n  )\n};\n\nexport default Character;\n\nCharacter.propTypes = {\n  name: PropTypes.string,\n  world: PropTypes.string,\n  population: PropTypes.string,\n  species: PropTypes.string,\n  relatedFilms: PropTypes.string,\n};\n","import React from 'react';\nimport './ScrollingText.css';\nimport PropTypes from 'prop-types';\n\n\nconst ScrollingText = (props) => {\n  return (\n    <div>\n      <div className=\"fade\"></div>\n        <section className=\"scrolling-text-container\">\n\n          <div className=\"crawl\">\n            <div className=\"title\">\n\n              <p className=\"scrolling-text-p-font\">Episode {props.episodeNumber}</p>\n              <br />\n              <p className=\"movie-title\">{props.movieTitle}</p>\n\n            </div>\n            <p className=\"scrolling-text\">{props.movieText}</p>\n            </div>\n        </section>\n    </div>\n  )\n};\n\nexport default ScrollingText;\n\nScrollingText.propTypes = {\n  movieText: PropTypes.string,\n  movieTitle: PropTypes.string,\n  episdoeNumber: PropTypes.string\n};\n","import React from 'react';\nimport './CharacterContainer.css';\nimport Character from '../Character/Character';\nimport Header from '../Header/Header'\nimport ScrollingText from '../ScrollingText/ScrollingText';\nimport PropTypes from 'prop-types';\n\n\nconst CharacterContainer = (props) => {\n  const characters = props.movie.characters.map((character, i) => {\n    let world = character.world[0];\n    return <Character\n      key={i}\n      name={character.name}\n      world= {world.name}\n      population={world.population}\n      species={character.species[0]}\n      relatedFilms={character.relatedFilms.join(', ')}\n    />\n  });\n\n\n  return (\n    <>\n      <Header\n          logOut={ props.logOut }\n          user={ props.user }\n        />\n        <main className=\"character-container\">\n          <ScrollingText movieText={props.movie.openingCredits}\n          movieTitle={props.movie.title}\n          episodeNumber={props.movie.episode}/>\n\n          <section className=\"movie-characters-banner\">\n\n            <h3 className=\"movie-title-banner\">{props.movie.title} Characters</h3>\n          </section>\n          {characters}\n      </main>\n    </>\n  )\n};\n\nexport default CharacterContainer;\n\nCharacterContainer.propTypes = {\n  user: PropTypes.object,\n  logOut: PropTypes.func,\n  movie: PropTypes.object\n}\n","import React from 'react'\nimport './Loading.css';\n\nconst Loading = () => {\n  return (\n    <main className=\"loader\">\n      <div className=\"title-container\">\n        <p className=\"loading-title loading\">Gathering data from a galaxy far, <br />far away</p>\n      </div>\n    </main>\n\n  )\n}\n\nexport default Loading;\n","export const getData = (url) => {\n  return fetch(url)\n    .then(res => {\n      if (!res.ok) {\n        throw Error('Error fetching data');\n      }\n      return res.json();\n  })\n}\n\n\nexport const getFilm = (film) => {\n  return fetch(film)\n  .then(res => {\n    if (!res.ok) {\n      throw Error('Error fetching film data');\n    }\n    return res.json();\n  })\n};\n\nexport const getSpecies = (species) => {\n  return fetch(species)\n    .then(res => {\n      if (!res.ok) {\n        throw Error('Error fetching species data');\n      }\n      return res.json();\n    })\n}\n\nexport const getWorld = (world) => {\n  return fetch(world)\n  .then(res => {\n    if (!res.ok) {\n      throw Error('Error fetching world data');\n    }\n    return res.json();\n  })\n}\n\nexport const getCharacter = (character) => {\n  return fetch(character)\n  .then(res => {\n    if (!res.ok) {\n      throw Error('Error fetching character data');\n    }\n    return res.json();\n  })\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Form from '../Form/Form';\nimport { Route, Redirect } from 'react-router-dom';\nimport MovieContainer from '../MovieContainer/MovieContainer';\nimport CharacterContainer from '../CharacterContainer/CharacterContainer';\nimport Loading from '../Loading/Loading';\nimport { getData, getFilm, getSpecies, getWorld, getCharacter } from '../../apiCalls';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      user: {\n        name: '',\n        quote: '',\n        rank: '',\n        favoriteCharacters: [],\n        loggedIn: false,\n      },\n      movies: [],\n      selectedCharacters: false,\n      isLoading: false\n    }\n  };\n\n  componentDidMount() {\n    getData('https://swapi.co/api/films/')\n      .then(data => {\n        return data.results.map(movie => {\n          return {\n            title: movie.title,\n            episode: movie.episode_id,\n            releaseDate: this.parseReleaseDate(movie.release_date),\n            characters: this.buildCharacterData(movie.characters),\n            image: '../images/movie.jpeg',\n            openingCredits: movie.opening_crawl\n          }\n       })\n      })\n      .then(movies => this.setState({ movies }))\n      .catch(err => this.setState(err))\n  };\n\n  userLogOut = () => {\n    this.setState({ user: {\n        name: '',\n        quote: '',\n        rank: '',\n        favoriteCharacters: [],\n        loggedIn: false,\n    }});\n  };\n\n  addUser = newUser => {\n    this.setState({ isLoading: true });\n    setTimeout(() => this.setState({ user: newUser, isLoading: false }), 7000)\n  };\n\n  parseReleaseDate = date => {\n    return date.split('-')[0];\n  };\n\n  buildCharacterData = (characters) => {\n    let promises = [];\n    for (let i = 0; i < 10; i++) {\n      getCharacter(characters[i])\n        .then(character => {\n          let world = this.buildWorldData(character.homeworld);\n          let char = {\n            name: character.name,\n            world: world,\n            species: this.buildSpeciesData(character.species),\n            relatedFilms: this.buildFilmData(character.films)\n          }\n          promises.push(char);\n      });\n    };\n    return promises;\n  };\n\n    buildWorldData = (homeworld) => {\n      let promises = [];\n      getWorld(homeworld)\n        .then(world => promises.push(world))\n        .catch(error => console.log(error));\n        return promises;\n    };\n\n    buildSpeciesData = (charSpecies) => {\n      let promises = [];\n      charSpecies.map(species => {\n        return getSpecies(species)\n          .then(data => promises.push(data.name))\n          .catch(error => console.log(error))\n      })\n      return promises;\n    };\n\n    buildFilmData = (films) => {\n      let promises = [];\n      films.map(film => {\n        getFilm(film)\n          .then(data => promises.push(data.title))\n          .catch(error => console.log(error))\n      })\n      return promises;\n    };\n\n    showMovieCharacters = () => {\n      this.setState({ selectedCharacters: true});\n    };\n\n    render() {\n      if (this.state.isLoading) {\n        return (\n          <Loading />\n        )\n      }\n      if (this.state.user.loggedIn && !this.state.selectedCharacters) {\n       return (\n       <>\n          <Redirect to=\"/movies\" />\n          <Route exact path='/movies' render={() => <MovieContainer showMovieCharacters={this.showMovieCharacters} logOut={this.userLogOut} movies={this.state.movies} user={this.state.user}\n         /> }\n        />\n       </>\n       )\n      }\n\n        return (\n          <main>\n            <Route exact path='/' render={ () => <Form addUser={this.addUser} /> } />\n\n            <Route exact path='/movies' render={() => <MovieContainer logOut={this.userLogOut} movies={this.state.movies} user={this.state.user} showMovieCharacters={this.showMovieCharacters}/> } />\n\n            <Route path='/movies/:movie_id' render={({ match }) => {\n            const movie = this.state.movies.find(movie => movie.episode === parseInt(match.params.movie_id))\n            return (\n             <CharacterContainer\n             user={this.state.user}\n             logOut={this.userLogOut}\n             movie={movie} />\n            )\n          }} />\n          </main>\n        )\n    };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nconst router = (\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n)\n\nReactDOM.render(router, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}